#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
import pandas as pd

configfile: workflow.source_path('../config/snakebids.yml')

# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)

#this adds constraints to the bids naming
wildcard_constraints: **snakebids.get_wildcard_constraints(config['pybids_inputs'])

wildcard_constraints:
    scanner='3T|7T',
    subject='sub-[0-9a-zA-Z]+'

#---- end snakebids boilerplate ------------------------------------------------

def get_subjects_bids(wildcards):
    participants_tsv = checkpoints.create_participants_tsv.get(**wildcards).output[0]
    subjects = pd.read_table(participants_tsv).participant_id
    
    return expand('{subgroup}_{scanner}/bids/{subject}',
                subject=subjects,
                scanner=wildcards.scanner)

def get_server_id(wildcards):
    participants_tsv =  checkpoints.create_participants_tsv.get(**wildcards).output[0]
    server_id = pd.read_table(participants_tsv).server_id
    return server_id

# rule all:
#     input:
#         expand(
#             expand(
#                 rules.smooth.output,
#                 fwhm = config['smoothing_fwhm'],
#                 allow_missing=True,
#             ),
#             zip,
#             **inputs.zip_lists['bold']
#         )
#     default_target: True

rule all:
    input: 
        expand(
           bids(
            root=output_dir,
            suffix='prepdwi.nii.gz',
            **inputs['bold'].wildcards
            ) 
        )

rule cfmm2tar:
    input: 
        cfmm_id=lambda wildcards: get_server_id(wildcards)
    output: 
        tar_dir=expand("{tar_dir}/{wildcards.subject}", tar_dir=config['sourcedata_dir']) 
    container: config['singularity']['cfmm2tar']
    shell: 'apptainer run docker://khanlab/cfmm2tar:v1.0.0 -n {input.cfmm_id} {output.tar_dir}'

rule tar2bids:
    input: 
        tar_dir=expand("{tar_dir}/{wildcards.subject}", tar_dir=config['sourcedata_dir']) 
    output: 
        bids(
            root=output_dir,
            suffix='prepdwi.nii.gz',
            **inputs['bold'].wildcards
        )
    container: config['singularity']['tar2bids']
    script: cfmm_base.py
    shell: 'apptainer run docker://khanlab/tar2bids:latest -h {script} -o {output} {input}

rule run_gradcorrect:
    input:
        bids(
            root=output_dir,
            suffix='bids.nii.gz',
            **inputs['bold'].wildcards
        )
    output:
        bids(
            root=output_dir,
            suffix='gradcorrect.nii.gz',
            **inputs['bold'].wildcards
        )
    container: config['singularity']['gradcorrect']
    params:
        grad_coeffs = config['parse_args']['grad_coeffs'],
        participant = config['parse_args']['participant_label']

    # verify the script down below is correct
    shell: 'apptainer run docker://khanlab/gradcorrect:latest {input} {output} participant --{params.grad_coeffs} --participant_label P${params.participant}'

rule prepdwi:
    input:
        bids(
            root=output_dir,
            suffix='gradcorrect.nii.gz',
            **inputs['bold'].wildcards
        )
    output:
        bids(
            root=output_dir,
            suffix='prepdwi.nii.gz',
            **inputs['bold'].wildcards
        )
    params:
        grad_coeffs = config['parse_args']['grad_coeffs'],
        participant = config['parse_args']['participant_label']
    shell: 'apptainer run docker://khanlab/prepdwi:latest snakedwi {input} {output} participant --participant_label P${params.participant} --gradcorrect_coeffs {params.grad_coeffs} --cores all'
